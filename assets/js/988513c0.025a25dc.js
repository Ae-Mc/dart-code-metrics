"use strict";(self.webpackChunkdart_code_metrics_website=self.webpackChunkdart_code_metrics_website||[]).push([[2317],{3905:function(e,n,r){r.d(n,{Zo:function(){return u},kt:function(){return d}});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function c(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=t.createContext({}),p=function(e){var n=t.useContext(i),r=n;return e&&(r="function"==typeof e?e(n):c(c({},n),e)),r},u=function(e){var n=p(e.components);return t.createElement(i.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},s=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),s=p(r),d=a,f=s["".concat(i,".").concat(d)]||s[d]||m[d]||o;return r?t.createElement(f,c(c({ref:n},u),{},{components:r})):t.createElement(f,c({ref:n},u))}));function d(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,c=new Array(o);c[0]=s;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,c[1]=l;for(var p=2;p<o;p++)c[p]=r[p];return t.createElement.apply(null,c)}return t.createElement.apply(null,r)}s.displayName="MDXCreateElement"},6963:function(e,n,r){r.r(n),r.d(n,{frontMatter:function(){return l},contentTitle:function(){return i},metadata:function(){return p},toc:function(){return u},default:function(){return s}});var t=r(7462),a=r(3366),o=(r(7294),r(3905)),c=["components"],l={},i="Prefer correct type name",p={unversionedId:"rules/common/prefer-correct-type-name",id:"rules/common/prefer-correct-type-name",isDocsHomePage:!1,title:"Prefer correct type name",description:"Configurable",source:"@site/docs/rules/common/prefer-correct-type-name.md",sourceDirName:"rules/common",slug:"/rules/common/prefer-correct-type-name",permalink:"/docs/rules/common/prefer-correct-type-name",editUrl:"https://github.com/dart-code-checker/dart-code-metrics/tree/master/website/docs/rules/common/prefer-correct-type-name.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Prefer correct identifier length",permalink:"/docs/rules/common/prefer-correct-identifier-length"},next:{title:"Prefer first",permalink:"/docs/rules/common/prefer-first"}},u=[{value:"Rule id",id:"rule-id",children:[],level:2},{value:"Description",id:"description",children:[{value:"Config example",id:"config-example",children:[],level:3},{value:"Example",id:"example",children:[],level:3}],level:2}],m={toc:u};function s(e){var n=e.components,r=(0,a.Z)(e,c);return(0,o.kt)("wrapper",(0,t.Z)({},m,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"prefer-correct-type-name"},"Prefer correct type name"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://img.shields.io/badge/-configurable-informational",alt:"Configurable"})),(0,o.kt)("h2",{id:"rule-id"},"Rule id"),(0,o.kt)("p",null,"prefer-correct-type-name"),(0,o.kt)("h2",{id:"description"},"Description"),(0,o.kt)("p",null,"Rule checks that the type name should only contain alphanumeric characters, start with an uppercase character and span between ",(0,o.kt)("inlineCode",{parentName:"p"},"min-length")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"max-length")," characters in length."),(0,o.kt)("p",null,"The rule can be configured using fields ",(0,o.kt)("inlineCode",{parentName:"p"},"min-length")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"max-length"),". By default it's ",(0,o.kt)("inlineCode",{parentName:"p"},"min-length = 3")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"max-length = 40"),". You can also configure type name exceptions with ",(0,o.kt)("inlineCode",{parentName:"p"},"excluded")," option."),(0,o.kt)("h3",{id:"config-example"},"Config example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"dart_code_metrics:\n  ...\n  rules:\n    ...\n    - prefer-correct-type-name:\n        excluded: [ 'exampleExclude' ]\n        min-length: 3\n        max-length: 40\n")),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("p",null,"Bad:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"class example { // not capitalized\n  //...\n} \nclass ex { // length equals 2\n  //...\n} \nclass multiplatformConfigurationPointWithExtras { // length equals 41\n  //...\n} \n")),(0,o.kt)("p",null,"Good:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"class Example { // length equals 7\n  //...\n}\n\nclass _Example { // length equals 7\n  //...\n} \n")))}s.isMDXComponent=!0}}]);