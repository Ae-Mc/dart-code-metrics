"use strict";(self.webpackChunkdart_code_metrics_website=self.webpackChunkdart_code_metrics_website||[]).push([[2139],{3905:function(e,r,n){n.d(r,{Zo:function(){return c},kt:function(){return m}});var t=n(7294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function s(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=t.createContext({}),l=function(e){var r=t.useContext(u),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},c=function(e){var r=l(e.components);return t.createElement(u.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},p=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=l(n),m=o,v=p["".concat(u,".").concat(m)]||p[m]||d[m]||a;return n?t.createElement(v,i(i({ref:r},c),{},{components:n})):t.createElement(v,i({ref:r},c))}));function m(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=p;var s={};for(var u in r)hasOwnProperty.call(r,u)&&(s[u]=r[u]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6825:function(e,r,n){n.r(r),n.d(r,{frontMatter:function(){return s},contentTitle:function(){return u},metadata:function(){return l},toc:function(){return c},default:function(){return p}});var t=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],s={},u="Avoid unused parameters",l={unversionedId:"rules/common/avoid-unused-parameters",id:"rules/common/avoid-unused-parameters",title:"Avoid unused parameters",description:"Rule id",source:"@site/docs/rules/common/avoid-unused-parameters.md",sourceDirName:"rules/common",slug:"/rules/common/avoid-unused-parameters",permalink:"/docs/rules/common/avoid-unused-parameters",editUrl:"https://github.com/dart-code-checker/dart-code-metrics/tree/master/website/docs/rules/common/avoid-unused-parameters.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Avoid unrelated type assertions",permalink:"/docs/rules/common/avoid-unrelated-type-assertions"},next:{title:"Binary expression operand order",permalink:"/docs/rules/common/binary-expression-operand-order"}},c=[{value:"Rule id",id:"rule-id",children:[],level:2},{value:"Severity",id:"severity",children:[],level:2},{value:"Description",id:"description",children:[{value:"Example",id:"example",children:[],level:3}],level:2}],d={toc:c};function p(e){var r=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,t.Z)({},d,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"avoid-unused-parameters"},"Avoid unused parameters"),(0,a.kt)("h2",{id:"rule-id"},"Rule id"),(0,a.kt)("p",null,"avoid-unused-parameters"),(0,a.kt)("h2",{id:"severity"},"Severity"),(0,a.kt)("p",null,"Warning"),(0,a.kt)("h2",{id:"description"},"Description"),(0,a.kt)("p",null,"Checks for unused parameters inside a function or method body.\nFor overridden methods suggests renaming unused parameters to ","_",", ","_","_",", etc."),(0,a.kt)("p",null,"Note: abstract classes are completely ignored by the rule to avoid redundant checks for potentially overridden methods."),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("p",null,"Bad:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"void someFunction(String s) { // LINT\n  return;\n}\n\nclass SomeClass {\n  void method(String s) { // LINT\n    return;\n  }\n}\n\nclass SomeClass extends AnotherClass {\n  @override\n  void method(String s) {} // LINT\n}\n")),(0,a.kt)("p",null,"Good:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"void someOtherFunction() {\n  return;\n}\n\nclass SomeOtherClass {\n  void method() {\n    return;\n  }\n}\n\nvoid someOtherFunction(String s) {\n  print(s);\n  return;\n}\n\nclass SomeOtherClass {\n  void method(String s) {\n    print(s);\n    return;\n  }\n}\n\nclass SomeOtherClass extends AnotherClass {\n  @override\n  void method(String _) {}\n}\n\nabstract class SomeOtherClass {\n  void method(String s);\n}\n")))}p.isMDXComponent=!0}}]);